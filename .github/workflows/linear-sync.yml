name: Linear status sync (from branch)

permissions:
  contents: read
  pull-requests: write # needed to rename the PR

on:
  pull_request:
    types:
      [
        opened,
        reopened,
        synchronize,
        closed,
        ready_for_review,
        converted_to_draft,
      ]
  pull_request_review:
    types: [submitted]
  issues:
    types: [labeled]

jobs:
  sync-linear:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
      || (github.event_name == 'pull_request_review' && github.event.pull_request.head.repo.full_name == github.repository)
      || (github.event_name == 'issues' && github.event.issue.pull_request)

    steps:
      - name: Gather context
        id: ctx
        run: |
          echo "BRANCH=${GITHUB_HEAD_REF:-${{ github.event.pull_request.head.ref || '' }}}" >> $GITHUB_OUTPUT
          echo "MERGED=${{ github.event.pull_request.merged || false }}" >> $GITHUB_OUTPUT
          echo "ACTION=${{ github.event.action }}" >> $GITHUB_OUTPUT
          echo "IS_DRAFT=${{ github.event.pull_request.draft || false }}" >> $GITHUB_OUTPUT
          echo "REVIEW_STATE=${{ github.event.review.state || '' }}" >> $GITHUB_OUTPUT
          echo "LABEL_NAME=${{ github.event.label.name || '' }}" >> $GITHUB_OUTPUT
          echo "PR_NUMBER=${{ github.event.pull_request.number || '' }}" >> $GITHUB_OUTPUT
          echo "PR_TITLE=${{ github.event.pull_request.title || '' }}" >> $GITHUB_OUTPUT

      - name: Find Linear ticket from branch (tra-123)
        id: key
        run: |
          BRANCH="${{ steps.ctx.outputs.BRANCH }}"
          echo "Branch: $BRANCH"
          MATCH=$(echo "$BRANCH" | grep -oiE 'tra-[0-9]+' | head -n1 || true)
          if [ -z "$MATCH" ]; then
            echo "No tra-### in branch. Skipping."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            TEAMKEY=$(echo "$MATCH" | sed -E 's/-[0-9]+$//' | tr '[:lower:]' '[:upper:]') # TRA
            NUM=$(echo "$MATCH" | grep -oE '[0-9]+')
            KEY="$TEAMKEY-$NUM"
            echo "Found: team=$TEAMKEY number=$NUM (key=$KEY)"
            echo "team=$TEAMKEY" >> $GITHUB_OUTPUT
            echo "num=$NUM" >> $GITHUB_OUTPUT
            echo "key=$KEY" >> $GITHUB_OUTPUT
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Update Linear
        if: steps.key.outputs.skip != 'true'
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
          TEAMKEY: ${{ steps.key.outputs.team }}
          NUM: ${{ steps.key.outputs.num }}
          ACTION: ${{ steps.ctx.outputs.ACTION }}
          MERGED: ${{ steps.ctx.outputs.MERGED }}
          IS_DRAFT: ${{ steps.ctx.outputs.IS_DRAFT }}
          REVIEW_STATE: ${{ steps.ctx.outputs.REVIEW_STATE }}
          LABEL_NAME: ${{ steps.ctx.outputs.LABEL_NAME }}
          PR_NUMBER: ${{ steps.ctx.outputs.PR_NUMBER }}
          PR_TITLE: ${{ steps.ctx.outputs.PR_TITLE }}
          REPO: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          graph() {
            curl -sS -H "Content-Type: application/json" \
                 -H "Authorization: $LINEAR_API_KEY" \
                 -X POST https://api.linear.app/graphql \
                 -d "$1"
          }

          echo "1) Resolve issue by team key + number, and fetch team states"
          # ---- 1) Resolve issue by team key + number, and fetch team states ----
          QUERY_PAYLOAD=$(jq -nc --arg teamKey "$TEAMKEY" --argjson num "$(jq -n --arg n "$NUM" '$n|tonumber')" \
          '{query: "query($teamKey:String!,$num:Float!){ issues(filter:{ number:{eq:$num}, team:{ key:{eq:$teamKey}}}){ nodes{ id number title state{ name } team{ key states{ nodes{ id name } } } } } }",
            variables:{ teamKey:$teamKey, num:$num }}')

          echo "QUERY_PAYLOAD: $QUERY_PAYLOAD"

          RES="$(graph "$QUERY_PAYLOAD")"

          echo "RES: $RES"

          ISSUE_ID=$(echo "$RES" | jq -r '.data.issues.nodes[0].id // empty')

          echo "ISSUE_ID: $ISSUE_ID"

          if [ -z "$ISSUE_ID" ]; then
            echo "Linear issue not found for $TEAMKEY-$NUM. Exiting."
            exit 0
          fi

          LINEAR_TITLE=$(echo "$RES"   | jq -r '.data.issues.nodes[0].title')
          CURRENT_STATE=$(echo "$RES"  | jq -r '.data.issues.nodes[0].state.name // ""')
          STATES_JSON=$(echo "$RES"    | jq    '.data.issues.nodes[0].team.states.nodes')

          echo "LINEAR_TITLE: $LINEAR_TITLE"
          echo "CURRENT_STATE: $CURRENT_STATE"
          echo "STATES_JSON: $STATES_JSON"


          echo "2) Decide target state from event"
          # ---- 2) Decide target state from event ----
          TARGET=""
          case "$ACTION" in
            opened|reopened|synchronize)
              if [ "$IS_DRAFT" = "true" ]; then TARGET="In Progress"; else TARGET="In Review"; fi
              ;;
            ready_for_review)       TARGET="In Review" ;;
            converted_to_draft)     TARGET="In Progress" ;;
            submitted)
              case "$REVIEW_STATE" in
                CHANGES_REQUESTED|changes_requested) TARGET="Changes requested" ;;
                APPROVED|approved)                   TARGET="In Review" ;;
                *) TARGET="" ;;
              esac
              ;;
            closed)
              if [ "$MERGED" = "true" ]; then TARGET="Done"; else TARGET="Canceled"; fi
              ;;
            labeled)
              if [ "${LABEL_NAME,,}" = "duplicate" ]; then TARGET="Duplicate"; fi
              ;;
          esac

          if [ -z "$TARGET" ]; then
            echo "No target state for action '$ACTION'."
            exit 0
          fi
          if [ "$TARGET" = "$CURRENT_STATE" ]; then
            echo "Already in '$TARGET'. Skipping state update."
            exit 0
          fi

          echo "3) Find state ID by name & update"
          # ---- 3) Find state ID by name & update ----
          STATE_ID=$(echo "$STATES_JSON" | jq -r --arg name "$TARGET" '.[] | select(.name==$name) | .id' | head -n1)
          if [ -z "$STATE_ID" ]; then
            echo "State '$TARGET' not found. Available:"
            echo "$STATES_JSON" | jq -r '.[].name'
            exit 1
          fi

          UPDATE=$(jq -nc --arg issueId "$ISSUE_ID" --arg stateId "$STATE_ID" \
            '{query:"mutation($issueId:String!,$stateId:String!){ issueUpdate(id:$issueId, input:{ stateId:$stateId }){ success } }",
              variables:{ issueId:$issueId, stateId:$stateId }}')

          RES_UPD="$(graph "$UPDATE")"
          if [ "$(echo "$RES_UPD" | jq -r '.data.issueUpdate.success')" != "true" ]; then
            echo "Failed to update Linear issue state:"
            echo "$RES_UPD"
            exit 1
          fi
          echo "Moved ${TEAMKEY}-${NUM}: '$CURRENT_STATE' → '$TARGET'."

          echo "RENAME PR"
          if [ -n "$PR_NUMBER" ]; then
            NEW_TITLE="[${TEAMKEY}-${NUM}]: ${LINEAR_TITLE}"
            if [ "$PR_TITLE" != "$NEW_TITLE" ]; then
              echo "Renaming PR #$PR_NUMBER → $NEW_TITLE"
              PATCH=$(jq -nc --arg t "$NEW_TITLE" '{title:$t}')
              curl -sS -X PATCH \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                https://api.github.com/repos/$REPO/pulls/$PR_NUMBER \
                -d "$PATCH" >/dev/null
            else
              echo "PR already has the desired title."
            fi
          fi

          PR_URL="https://github.com/$REPO/pull/$PR_NUMBER"
          ATTACH_TITLE="PR #$PR_NUMBER: $PR_TITLE"
          ATTACH_SUBTITLE="GitHub Pull Request"

          echo "ATTACH PR"
          CREATE_PAYLOAD=$(jq -nc \
            --arg issueId "$ISSUE_ID" \
            --arg url "$PR_URL" \
            --arg title "$ATTACH_TITLE" \
            --arg subtitle "$ATTACH_SUBTITLE" \
            --arg icon "https://github.githubassets.com/favicons/favicon.png" \
          '{
            query: "mutation($input: AttachmentCreateInput!){ attachmentCreate(input:$input){ success attachment{ id } } }",
            variables: { input: { issueId: $issueId, url: $url, title: $title, subtitle: $subtitle, iconUrl: $icon } }
          }')

          echo "Sending attachmentCreate"
          echo "$CREATE_PAYLOAD" | jq
          CREATE_RES="$(graph "$CREATE_PAYLOAD")"
          echo "ATTACH PR response"
          echo "$CREATE_RES" | jq
